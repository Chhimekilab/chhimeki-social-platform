{"ast":null,"code":"// Analytics Service for User Interaction Tracking\nimport axios from 'axios';\nclass AnalyticsService {\n  constructor() {\n    this.userId = null;\n    this.sessionId = this.generateSessionId();\n    this.eventQueue = [];\n    this.isOnline = navigator.onLine;\n    this.apiEndpoint = process.env.REACT_APP_ANALYTICS_API || '/api/analytics';\n\n    // Initialize session tracking\n    this.initializeSession();\n\n    // Setup event listeners for offline/online\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.flushEventQueue();\n    });\n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n    });\n\n    // Auto-flush events every 30 seconds\n    setInterval(() => {\n      this.flushEventQueue();\n    }, 30000);\n  }\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  initializeSession() {\n    const sessionData = {\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n      screenResolution: `${window.screen.width}x${window.screen.height}`,\n      viewportSize: `${window.innerWidth}x${window.innerHeight}`,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      referrer: document.referrer\n    };\n    this.trackEvent('session_start', sessionData);\n  }\n  setUserId(userId) {\n    this.userId = userId;\n    this.trackEvent('user_identified', {\n      userId\n    });\n  }\n\n  // Core event tracking method\n  trackEvent(eventName, eventData = {}, metadata = {}) {\n    const event = {\n      eventId: this.generateEventId(),\n      eventName,\n      userId: this.userId,\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      data: eventData,\n      metadata: {\n        url: window.location.href,\n        pathname: window.location.pathname,\n        ...metadata\n      }\n    };\n    this.eventQueue.push(event);\n\n    // Store in local storage as backup\n    this.storeEventLocally(event);\n\n    // Try to send immediately if online\n    if (this.isOnline && this.eventQueue.length >= 5) {\n      this.flushEventQueue();\n    }\n  }\n  generateEventId() {\n    return 'evt_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n  storeEventLocally(event) {\n    try {\n      const storedEvents = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      storedEvents.push(event);\n\n      // Keep only last 1000 events locally\n      if (storedEvents.length > 1000) {\n        storedEvents.splice(0, storedEvents.length - 1000);\n      }\n      localStorage.setItem('analytics_events', JSON.stringify(storedEvents));\n    } catch (error) {\n      console.warn('Failed to store analytics event locally:', error);\n    }\n  }\n  async flushEventQueue() {\n    if (this.eventQueue.length === 0) return;\n    const eventsToSend = [...this.eventQueue];\n    this.eventQueue = [];\n    try {\n      // In a real implementation, this would send to your analytics API\n      console.log('Sending analytics events:', eventsToSend);\n\n      // Simulate API call - replace with actual endpoint\n      // await axios.post(this.apiEndpoint + '/events', { events: eventsToSend });\n\n      // Remove sent events from local storage\n      this.removeEventsFromLocalStorage(eventsToSend.map(e => e.eventId));\n    } catch (error) {\n      console.error('Failed to send analytics events:', error);\n      // Re-add events to queue for retry\n      this.eventQueue.unshift(...eventsToSend);\n    }\n  }\n  removeEventsFromLocalStorage(eventIds) {\n    try {\n      const storedEvents = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      const filteredEvents = storedEvents.filter(event => !eventIds.includes(event.eventId));\n      localStorage.setItem('analytics_events', JSON.stringify(filteredEvents));\n    } catch (error) {\n      console.warn('Failed to remove events from local storage:', error);\n    }\n  }\n\n  // Social Media Specific Tracking Methods\n\n  // Post Interactions\n  trackPostView(postId, postAuthor, postType = 'text') {\n    this.trackEvent('post_view', {\n      postId,\n      postAuthor,\n      postType,\n      viewDuration: 0 // This would be calculated based on scroll behavior\n    });\n  }\n  trackPostLike(postId, postAuthor, isLiked) {\n    this.trackEvent('post_like', {\n      postId,\n      postAuthor,\n      action: isLiked ? 'like' : 'unlike'\n    });\n  }\n  trackPostShare(postId, postAuthor, shareMethod) {\n    this.trackEvent('post_share', {\n      postId,\n      postAuthor,\n      shareMethod // 'direct_link', 'copy_link', 'social_share'\n    });\n  }\n  trackPostComment(postId, postAuthor, commentLength) {\n    this.trackEvent('post_comment', {\n      postId,\n      postAuthor,\n      commentLength\n    });\n  }\n\n  // Post Creation\n  trackPostCreated(postId, postType, contentLength, hasMedia) {\n    this.trackEvent('post_created', {\n      postId,\n      postType,\n      contentLength,\n      hasMedia,\n      creationTime: new Date().toISOString()\n    });\n  }\n  trackPostDraft(contentLength, hasMedia) {\n    this.trackEvent('post_draft', {\n      contentLength,\n      hasMedia,\n      draftTime: new Date().toISOString()\n    });\n  }\n\n  // Navigation Tracking\n  trackPageView(pageName, additionalData = {}) {\n    this.trackEvent('page_view', {\n      pageName,\n      ...additionalData\n    });\n  }\n  trackTabSwitch(fromTab, toTab) {\n    this.trackEvent('tab_switch', {\n      fromTab,\n      toTab,\n      switchTime: new Date().toISOString()\n    });\n  }\n\n  // Search and Discovery\n  trackSearch(query, resultCount, category = 'all') {\n    this.trackEvent('search_performed', {\n      query: query.toLowerCase(),\n      // Anonymize if needed\n      resultCount,\n      category,\n      queryLength: query.length\n    });\n  }\n  trackSearchResult(query, resultPosition, resultType, resultId) {\n    this.trackEvent('search_result_click', {\n      query: query.toLowerCase(),\n      resultPosition,\n      resultType,\n      resultId\n    });\n  }\n\n  // Social Interactions\n  trackFollow(targetUserId, action) {\n    this.trackEvent('user_follow', {\n      targetUserId,\n      action // 'follow' or 'unfollow'\n    });\n  }\n  trackProfileView(profileUserId, viewSource) {\n    this.trackEvent('profile_view', {\n      profileUserId,\n      viewSource // 'search', 'post_click', 'suggestion', etc.\n    });\n  }\n  trackMessage(recipientId, messageType, messageLength) {\n    this.trackEvent('message_sent', {\n      recipientId,\n      messageType,\n      // 'text', 'media', 'emoji'\n      messageLength\n    });\n  }\n\n  // Community Interactions\n  trackCommunityJoin(communityId, communityName, joinMethod) {\n    this.trackEvent('community_join', {\n      communityId,\n      communityName,\n      joinMethod // 'search', 'invitation', 'recommendation'\n    });\n  }\n  trackCommunityLeave(communityId, communityName, timeInCommunity) {\n    this.trackEvent('community_leave', {\n      communityId,\n      communityName,\n      timeInCommunity // in days\n    });\n  }\n  trackCommunityPost(communityId, postId, postType) {\n    this.trackEvent('community_post', {\n      communityId,\n      postId,\n      postType\n    });\n  }\n\n  // News and Content Consumption\n  trackNewsArticleView(articleId, category, source, timeSpent) {\n    this.trackEvent('news_article_view', {\n      articleId,\n      category,\n      source,\n      timeSpent\n    });\n  }\n  trackNewsArticleShare(articleId, category, source, shareMethod) {\n    this.trackEvent('news_article_share', {\n      articleId,\n      category,\n      source,\n      shareMethod\n    });\n  }\n  trackCategoryFilter(category, fromCategory) {\n    this.trackEvent('category_filter', {\n      category,\n      fromCategory\n    });\n  }\n\n  // Trending Content\n  trackTrendingItemView(itemId, platform, itemType, position) {\n    this.trackEvent('trending_item_view', {\n      itemId,\n      platform,\n      // 'twitter', 'facebook', 'tiktok', 'instagram'\n      itemType,\n      position\n    });\n  }\n  trackTrendingItemClick(itemId, platform, itemType, position) {\n    this.trackEvent('trending_item_click', {\n      itemId,\n      platform,\n      itemType,\n      position\n    });\n  }\n\n  // Media Interactions\n  trackMediaUpload(mediaType, mediaSize, uploadDuration) {\n    this.trackEvent('media_upload', {\n      mediaType,\n      // 'image', 'video', 'audio'\n      mediaSize,\n      uploadDuration\n    });\n  }\n  trackMediaView(mediaId, mediaType, viewDuration) {\n    this.trackEvent('media_view', {\n      mediaId,\n      mediaType,\n      viewDuration\n    });\n  }\n  trackStoryView(storyId, storyAuthor, viewDuration) {\n    this.trackEvent('story_view', {\n      storyId,\n      storyAuthor,\n      viewDuration\n    });\n  }\n\n  // Error and Performance Tracking\n  trackError(errorType, errorMessage, errorLocation) {\n    this.trackEvent('error_occurred', {\n      errorType,\n      errorMessage,\n      errorLocation,\n      userAgent: navigator.userAgent\n    });\n  }\n  trackPerformance(action, duration, additionalMetrics = {}) {\n    this.trackEvent('performance_metric', {\n      action,\n      duration,\n      ...additionalMetrics\n    });\n  }\n\n  // Engagement Metrics\n  trackSessionDuration(duration) {\n    this.trackEvent('session_duration', {\n      duration,\n      sessionId: this.sessionId\n    });\n  }\n  trackScrollDepth(pageName, scrollPercentage) {\n    this.trackEvent('scroll_depth', {\n      pageName,\n      scrollPercentage\n    });\n  }\n  trackTimeOnPage(pageName, timeSpent) {\n    this.trackEvent('time_on_page', {\n      pageName,\n      timeSpent\n    });\n  }\n\n  // Premium Features\n  trackPremiumFeatureView(featureName) {\n    this.trackEvent('premium_feature_view', {\n      featureName\n    });\n  }\n  trackPremiumUpgrade(fromPlan, toPlan, triggerLocation) {\n    this.trackEvent('premium_upgrade', {\n      fromPlan,\n      toPlan,\n      triggerLocation\n    });\n  }\n\n  // Notification Interactions\n  trackNotificationView(notificationId, notificationType) {\n    this.trackEvent('notification_view', {\n      notificationId,\n      notificationType\n    });\n  }\n  trackNotificationClick(notificationId, notificationType, action) {\n    this.trackEvent('notification_click', {\n      notificationId,\n      notificationType,\n      action\n    });\n  }\n\n  // Location-based tracking (with privacy considerations)\n  trackLocationFeatureUse(featureName, locationAccuracy) {\n    this.trackEvent('location_feature_use', {\n      featureName,\n      locationAccuracy // 'city', 'neighborhood', 'approximate'\n      // Never store exact coordinates for privacy\n    });\n  }\n\n  // A/B Testing and Feature Flags\n  trackExperimentView(experimentName, variant) {\n    this.trackEvent('experiment_view', {\n      experimentName,\n      variant\n    });\n  }\n  trackFeatureFlagTrigger(flagName, flagValue) {\n    this.trackEvent('feature_flag_trigger', {\n      flagName,\n      flagValue\n    });\n  }\n\n  // Data export and privacy compliance\n  async exportUserData(userId) {\n    try {\n      // In real implementation, this would call your API\n      const userData = {\n        userId,\n        exportTimestamp: new Date().toISOString(),\n        events: JSON.parse(localStorage.getItem('analytics_events') || '[]').filter(event => event.userId === userId)\n      };\n      return userData;\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n  async deleteUserData(userId) {\n    try {\n      // Remove from local storage\n      const events = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      const filteredEvents = events.filter(event => event.userId !== userId);\n      localStorage.setItem('analytics_events', JSON.stringify(filteredEvents));\n\n      // In real implementation, this would call your API to delete server-side data\n      this.trackEvent('user_data_deleted', {\n        deletedUserId: userId\n      });\n      return true;\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst analyticsService = new AnalyticsService();\nexport default analyticsService;","map":{"version":3,"names":["axios","AnalyticsService","constructor","userId","sessionId","generateSessionId","eventQueue","isOnline","navigator","onLine","apiEndpoint","process","env","REACT_APP_ANALYTICS_API","initializeSession","window","addEventListener","flushEventQueue","setInterval","Date","now","Math","random","toString","substr","sessionData","timestamp","toISOString","userAgent","platform","language","screenResolution","screen","width","height","viewportSize","innerWidth","innerHeight","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","referrer","document","trackEvent","setUserId","eventName","eventData","metadata","event","eventId","generateEventId","data","url","location","href","pathname","push","storeEventLocally","length","storedEvents","JSON","parse","localStorage","getItem","splice","setItem","stringify","error","console","warn","eventsToSend","log","removeEventsFromLocalStorage","map","e","unshift","eventIds","filteredEvents","filter","includes","trackPostView","postId","postAuthor","postType","viewDuration","trackPostLike","isLiked","action","trackPostShare","shareMethod","trackPostComment","commentLength","trackPostCreated","contentLength","hasMedia","creationTime","trackPostDraft","draftTime","trackPageView","pageName","additionalData","trackTabSwitch","fromTab","toTab","switchTime","trackSearch","query","resultCount","category","toLowerCase","queryLength","trackSearchResult","resultPosition","resultType","resultId","trackFollow","targetUserId","trackProfileView","profileUserId","viewSource","trackMessage","recipientId","messageType","messageLength","trackCommunityJoin","communityId","communityName","joinMethod","trackCommunityLeave","timeInCommunity","trackCommunityPost","trackNewsArticleView","articleId","source","timeSpent","trackNewsArticleShare","trackCategoryFilter","fromCategory","trackTrendingItemView","itemId","itemType","position","trackTrendingItemClick","trackMediaUpload","mediaType","mediaSize","uploadDuration","trackMediaView","mediaId","trackStoryView","storyId","storyAuthor","trackError","errorType","errorMessage","errorLocation","trackPerformance","duration","additionalMetrics","trackSessionDuration","trackScrollDepth","scrollPercentage","trackTimeOnPage","trackPremiumFeatureView","featureName","trackPremiumUpgrade","fromPlan","toPlan","triggerLocation","trackNotificationView","notificationId","notificationType","trackNotificationClick","trackLocationFeatureUse","locationAccuracy","trackExperimentView","experimentName","variant","trackFeatureFlagTrigger","flagName","flagValue","exportUserData","userData","exportTimestamp","events","deleteUserData","deletedUserId","analyticsService"],"sources":["/workspace/src/services/analyticsService.js"],"sourcesContent":["// Analytics Service for User Interaction Tracking\nimport axios from 'axios';\n\nclass AnalyticsService {\n  constructor() {\n    this.userId = null;\n    this.sessionId = this.generateSessionId();\n    this.eventQueue = [];\n    this.isOnline = navigator.onLine;\n    this.apiEndpoint = process.env.REACT_APP_ANALYTICS_API || '/api/analytics';\n    \n    // Initialize session tracking\n    this.initializeSession();\n    \n    // Setup event listeners for offline/online\n    window.addEventListener('online', () => {\n      this.isOnline = true;\n      this.flushEventQueue();\n    });\n    \n    window.addEventListener('offline', () => {\n      this.isOnline = false;\n    });\n    \n    // Auto-flush events every 30 seconds\n    setInterval(() => {\n      this.flushEventQueue();\n    }, 30000);\n  }\n\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  initializeSession() {\n    const sessionData = {\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      platform: navigator.platform,\n      language: navigator.language,\n      screenResolution: `${window.screen.width}x${window.screen.height}`,\n      viewportSize: `${window.innerWidth}x${window.innerHeight}`,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      referrer: document.referrer\n    };\n    \n    this.trackEvent('session_start', sessionData);\n  }\n\n  setUserId(userId) {\n    this.userId = userId;\n    this.trackEvent('user_identified', { userId });\n  }\n\n  // Core event tracking method\n  trackEvent(eventName, eventData = {}, metadata = {}) {\n    const event = {\n      eventId: this.generateEventId(),\n      eventName,\n      userId: this.userId,\n      sessionId: this.sessionId,\n      timestamp: new Date().toISOString(),\n      data: eventData,\n      metadata: {\n        url: window.location.href,\n        pathname: window.location.pathname,\n        ...metadata\n      }\n    };\n\n    this.eventQueue.push(event);\n    \n    // Store in local storage as backup\n    this.storeEventLocally(event);\n    \n    // Try to send immediately if online\n    if (this.isOnline && this.eventQueue.length >= 5) {\n      this.flushEventQueue();\n    }\n  }\n\n  generateEventId() {\n    return 'evt_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  storeEventLocally(event) {\n    try {\n      const storedEvents = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      storedEvents.push(event);\n      \n      // Keep only last 1000 events locally\n      if (storedEvents.length > 1000) {\n        storedEvents.splice(0, storedEvents.length - 1000);\n      }\n      \n      localStorage.setItem('analytics_events', JSON.stringify(storedEvents));\n    } catch (error) {\n      console.warn('Failed to store analytics event locally:', error);\n    }\n  }\n\n  async flushEventQueue() {\n    if (this.eventQueue.length === 0) return;\n\n    const eventsToSend = [...this.eventQueue];\n    this.eventQueue = [];\n\n    try {\n      // In a real implementation, this would send to your analytics API\n      console.log('Sending analytics events:', eventsToSend);\n      \n      // Simulate API call - replace with actual endpoint\n      // await axios.post(this.apiEndpoint + '/events', { events: eventsToSend });\n      \n      // Remove sent events from local storage\n      this.removeEventsFromLocalStorage(eventsToSend.map(e => e.eventId));\n      \n    } catch (error) {\n      console.error('Failed to send analytics events:', error);\n      // Re-add events to queue for retry\n      this.eventQueue.unshift(...eventsToSend);\n    }\n  }\n\n  removeEventsFromLocalStorage(eventIds) {\n    try {\n      const storedEvents = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      const filteredEvents = storedEvents.filter(event => !eventIds.includes(event.eventId));\n      localStorage.setItem('analytics_events', JSON.stringify(filteredEvents));\n    } catch (error) {\n      console.warn('Failed to remove events from local storage:', error);\n    }\n  }\n\n  // Social Media Specific Tracking Methods\n  \n  // Post Interactions\n  trackPostView(postId, postAuthor, postType = 'text') {\n    this.trackEvent('post_view', {\n      postId,\n      postAuthor,\n      postType,\n      viewDuration: 0 // This would be calculated based on scroll behavior\n    });\n  }\n\n  trackPostLike(postId, postAuthor, isLiked) {\n    this.trackEvent('post_like', {\n      postId,\n      postAuthor,\n      action: isLiked ? 'like' : 'unlike'\n    });\n  }\n\n  trackPostShare(postId, postAuthor, shareMethod) {\n    this.trackEvent('post_share', {\n      postId,\n      postAuthor,\n      shareMethod // 'direct_link', 'copy_link', 'social_share'\n    });\n  }\n\n  trackPostComment(postId, postAuthor, commentLength) {\n    this.trackEvent('post_comment', {\n      postId,\n      postAuthor,\n      commentLength\n    });\n  }\n\n  // Post Creation\n  trackPostCreated(postId, postType, contentLength, hasMedia) {\n    this.trackEvent('post_created', {\n      postId,\n      postType,\n      contentLength,\n      hasMedia,\n      creationTime: new Date().toISOString()\n    });\n  }\n\n  trackPostDraft(contentLength, hasMedia) {\n    this.trackEvent('post_draft', {\n      contentLength,\n      hasMedia,\n      draftTime: new Date().toISOString()\n    });\n  }\n\n  // Navigation Tracking\n  trackPageView(pageName, additionalData = {}) {\n    this.trackEvent('page_view', {\n      pageName,\n      ...additionalData\n    });\n  }\n\n  trackTabSwitch(fromTab, toTab) {\n    this.trackEvent('tab_switch', {\n      fromTab,\n      toTab,\n      switchTime: new Date().toISOString()\n    });\n  }\n\n  // Search and Discovery\n  trackSearch(query, resultCount, category = 'all') {\n    this.trackEvent('search_performed', {\n      query: query.toLowerCase(), // Anonymize if needed\n      resultCount,\n      category,\n      queryLength: query.length\n    });\n  }\n\n  trackSearchResult(query, resultPosition, resultType, resultId) {\n    this.trackEvent('search_result_click', {\n      query: query.toLowerCase(),\n      resultPosition,\n      resultType,\n      resultId\n    });\n  }\n\n  // Social Interactions\n  trackFollow(targetUserId, action) {\n    this.trackEvent('user_follow', {\n      targetUserId,\n      action // 'follow' or 'unfollow'\n    });\n  }\n\n  trackProfileView(profileUserId, viewSource) {\n    this.trackEvent('profile_view', {\n      profileUserId,\n      viewSource // 'search', 'post_click', 'suggestion', etc.\n    });\n  }\n\n  trackMessage(recipientId, messageType, messageLength) {\n    this.trackEvent('message_sent', {\n      recipientId,\n      messageType, // 'text', 'media', 'emoji'\n      messageLength\n    });\n  }\n\n  // Community Interactions\n  trackCommunityJoin(communityId, communityName, joinMethod) {\n    this.trackEvent('community_join', {\n      communityId,\n      communityName,\n      joinMethod // 'search', 'invitation', 'recommendation'\n    });\n  }\n\n  trackCommunityLeave(communityId, communityName, timeInCommunity) {\n    this.trackEvent('community_leave', {\n      communityId,\n      communityName,\n      timeInCommunity // in days\n    });\n  }\n\n  trackCommunityPost(communityId, postId, postType) {\n    this.trackEvent('community_post', {\n      communityId,\n      postId,\n      postType\n    });\n  }\n\n  // News and Content Consumption\n  trackNewsArticleView(articleId, category, source, timeSpent) {\n    this.trackEvent('news_article_view', {\n      articleId,\n      category,\n      source,\n      timeSpent\n    });\n  }\n\n  trackNewsArticleShare(articleId, category, source, shareMethod) {\n    this.trackEvent('news_article_share', {\n      articleId,\n      category,\n      source,\n      shareMethod\n    });\n  }\n\n  trackCategoryFilter(category, fromCategory) {\n    this.trackEvent('category_filter', {\n      category,\n      fromCategory\n    });\n  }\n\n  // Trending Content\n  trackTrendingItemView(itemId, platform, itemType, position) {\n    this.trackEvent('trending_item_view', {\n      itemId,\n      platform, // 'twitter', 'facebook', 'tiktok', 'instagram'\n      itemType,\n      position\n    });\n  }\n\n  trackTrendingItemClick(itemId, platform, itemType, position) {\n    this.trackEvent('trending_item_click', {\n      itemId,\n      platform,\n      itemType,\n      position\n    });\n  }\n\n  // Media Interactions\n  trackMediaUpload(mediaType, mediaSize, uploadDuration) {\n    this.trackEvent('media_upload', {\n      mediaType, // 'image', 'video', 'audio'\n      mediaSize,\n      uploadDuration\n    });\n  }\n\n  trackMediaView(mediaId, mediaType, viewDuration) {\n    this.trackEvent('media_view', {\n      mediaId,\n      mediaType,\n      viewDuration\n    });\n  }\n\n  trackStoryView(storyId, storyAuthor, viewDuration) {\n    this.trackEvent('story_view', {\n      storyId,\n      storyAuthor,\n      viewDuration\n    });\n  }\n\n  // Error and Performance Tracking\n  trackError(errorType, errorMessage, errorLocation) {\n    this.trackEvent('error_occurred', {\n      errorType,\n      errorMessage,\n      errorLocation,\n      userAgent: navigator.userAgent\n    });\n  }\n\n  trackPerformance(action, duration, additionalMetrics = {}) {\n    this.trackEvent('performance_metric', {\n      action,\n      duration,\n      ...additionalMetrics\n    });\n  }\n\n  // Engagement Metrics\n  trackSessionDuration(duration) {\n    this.trackEvent('session_duration', {\n      duration,\n      sessionId: this.sessionId\n    });\n  }\n\n  trackScrollDepth(pageName, scrollPercentage) {\n    this.trackEvent('scroll_depth', {\n      pageName,\n      scrollPercentage\n    });\n  }\n\n  trackTimeOnPage(pageName, timeSpent) {\n    this.trackEvent('time_on_page', {\n      pageName,\n      timeSpent\n    });\n  }\n\n  // Premium Features\n  trackPremiumFeatureView(featureName) {\n    this.trackEvent('premium_feature_view', {\n      featureName\n    });\n  }\n\n  trackPremiumUpgrade(fromPlan, toPlan, triggerLocation) {\n    this.trackEvent('premium_upgrade', {\n      fromPlan,\n      toPlan,\n      triggerLocation\n    });\n  }\n\n  // Notification Interactions\n  trackNotificationView(notificationId, notificationType) {\n    this.trackEvent('notification_view', {\n      notificationId,\n      notificationType\n    });\n  }\n\n  trackNotificationClick(notificationId, notificationType, action) {\n    this.trackEvent('notification_click', {\n      notificationId,\n      notificationType,\n      action\n    });\n  }\n\n  // Location-based tracking (with privacy considerations)\n  trackLocationFeatureUse(featureName, locationAccuracy) {\n    this.trackEvent('location_feature_use', {\n      featureName,\n      locationAccuracy, // 'city', 'neighborhood', 'approximate'\n      // Never store exact coordinates for privacy\n    });\n  }\n\n  // A/B Testing and Feature Flags\n  trackExperimentView(experimentName, variant) {\n    this.trackEvent('experiment_view', {\n      experimentName,\n      variant\n    });\n  }\n\n  trackFeatureFlagTrigger(flagName, flagValue) {\n    this.trackEvent('feature_flag_trigger', {\n      flagName,\n      flagValue\n    });\n  }\n\n  // Data export and privacy compliance\n  async exportUserData(userId) {\n    try {\n      // In real implementation, this would call your API\n      const userData = {\n        userId,\n        exportTimestamp: new Date().toISOString(),\n        events: JSON.parse(localStorage.getItem('analytics_events') || '[]')\n          .filter(event => event.userId === userId)\n      };\n      \n      return userData;\n    } catch (error) {\n      console.error('Failed to export user data:', error);\n      throw error;\n    }\n  }\n\n  async deleteUserData(userId) {\n    try {\n      // Remove from local storage\n      const events = JSON.parse(localStorage.getItem('analytics_events') || '[]');\n      const filteredEvents = events.filter(event => event.userId !== userId);\n      localStorage.setItem('analytics_events', JSON.stringify(filteredEvents));\n      \n      // In real implementation, this would call your API to delete server-side data\n      this.trackEvent('user_data_deleted', { deletedUserId: userId });\n      \n      return true;\n    } catch (error) {\n      console.error('Failed to delete user data:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export singleton instance\nconst analyticsService = new AnalyticsService();\n\nexport default analyticsService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}