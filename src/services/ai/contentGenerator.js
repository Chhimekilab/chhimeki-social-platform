import { v4 as uuidv4 } from 'uuid';

// Mock OpenAI responses for different types of content
const MOCK_POST_TEMPLATES = [
  {
    template: "ðŸš€ {topic} is changing everything! {description} What do you think about this breakthrough? Share your thoughts! #{hashtags}",
    tone: "excited"
  },
  {
    template: "Interesting development: {topic}. {description} This could have major implications for the future. What's your take? #{hashtags}",
    tone: "informative"
  },
  {
    template: "ðŸ”¥ Hot topic alert: {topic}! {description} The implications are huge. Join the discussion! #{hashtags}",
    tone: "engaging"
  },
  {
    template: "Breaking: {topic} ðŸ“¢ {description} This is a game-changer! What are your thoughts? #{hashtags}",
    tone: "urgent"
  },
  {
    template: "ðŸ’¡ Fascinating insight: {topic}. {description} Love to hear your perspective on this! #{hashtags}",
    tone: "thoughtful"
  }
];

const MOCK_COMMENT_RESPONSES = [
  "That's a really interesting perspective! I hadn't thought about it that way.",
  "Great point! This definitely opens up new possibilities.",
  "I agree! The potential impact could be significant.",
  "Thanks for sharing that insight. Very thought-provoking!",
  "Absolutely! This could change how we approach things.",
  "Interesting take! What made you think about it from that angle?",
  "I see what you mean. The implications are quite broad.",
  "Good observation! This trend is definitely worth watching."
];

/**
 * Generate hashtags based on keywords
 */
const generateHashtags = (keywords, category) => {
  const categoryTags = {
    'Technology': ['Tech', 'Innovation', 'Future', 'Digital'],
    'Health': ['Health', 'Medical', 'Wellness', 'Healthcare'],
    'Business': ['Business', 'Economy', 'Market', 'Finance'],
    'Science': ['Science', 'Research', 'Discovery', 'Knowledge'],
    'Environment': ['Environment', 'Green', 'Sustainability', 'Climate'],
    'General': ['News', 'Trending', 'Discussion', 'Updates']
  };

  const baseTags = categoryTags[category] || categoryTags['General'];
  const keywordTags = keywords.slice(0, 3).map(k => k.charAt(0).toUpperCase() + k.slice(1));
  
  return [...baseTags.slice(0, 2), ...keywordTags].join(' #');
};

/**
 * Simulate OpenAI API call for content generation
 */
const simulateOpenAICall = async (prompt, type = 'post', maxTokens = 150) => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 1500 + Math.random() * 1000));
  
  console.log(`ðŸ¤– Generating ${type} with prompt: ${prompt.substring(0, 100)}...`);
  
  // In production, this would be:
  // const response = await openai.chat.completions.create({
  //   model: "gpt-3.5-turbo",
  //   messages: [{ role: "user", content: prompt }],
  //   max_tokens: maxTokens,
  //   temperature: 0.7,
  // });
  // return response.choices[0].message.content;
  
  // For now, return simulated response
  return "Generated by AI (placeholder)";
};

/**
 * Generate AI post about a trending topic
 */
export const generateTrendPost = async (trendData) => {
  try {
    console.log(`ðŸ”® Generating AI post for trend: ${trendData.topic}`);
    
    const template = MOCK_POST_TEMPLATES[Math.floor(Math.random() * MOCK_POST_TEMPLATES.length)];
    const hashtags = generateHashtags(trendData.keywords || [], trendData.category || 'General');
    
    // Build the prompt for OpenAI
    const prompt = `Create an engaging social media post about: ${trendData.topic}
    
Context: ${trendData.description}
Category: ${trendData.category}

Requirements:
- 150-300 characters
- Engaging and thought-provoking
- Include relevant hashtags
- Encourage discussion
- Maintain neutral but excited tone
- Ask a question to drive engagement

Format: Text with appropriate emojis and hashtags`;

    // Simulate OpenAI call
    await simulateOpenAICall(prompt, 'post');
    
    // For now, use template-based generation
    let generatedPost = template.template
      .replace('{topic}', trendData.topic)
      .replace('{description}', trendData.description.substring(0, 100) + '...')
      .replace('{hashtags}', hashtags);
    
    // Add some variety
    const emojis = ['ðŸš€', 'ðŸ’¡', 'ðŸ”¥', 'âš¡', 'âœ¨', 'ðŸŒŸ', 'ðŸ’­', 'ðŸŽ¯'];
    if (Math.random() > 0.5) {
      const emoji = emojis[Math.floor(Math.random() * emojis.length)];
      generatedPost = `${emoji} ${generatedPost}`;
    }
    
    // Ensure it's not too long
    if (generatedPost.length > 280) {
      generatedPost = generatedPost.substring(0, 270) + '... ðŸ§µ';
    }
    
    console.log(`âœ… Generated post: ${generatedPost.substring(0, 50)}...`);
    
    return {
      content: generatedPost,
      metadata: {
        id: uuidv4(),
        trend_topic_id: trendData.id,
        generation_prompt: prompt,
        model_used: 'gpt-3.5-turbo',
        template_used: template.tone,
        quality_score: Math.random() * 0.3 + 0.7, // 0.7-1.0
        created_at: new Date().toISOString()
      }
    };
    
  } catch (error) {
    console.error('Error generating trend post:', error);
    throw new Error(`Failed to generate post: ${error.message}`);
  }
};

/**
 * Generate AI response to a comment
 */
export const generateCommentResponse = async (originalComment, postContext) => {
  try {
    console.log(`ðŸ’¬ Generating AI response to comment: ${originalComment.substring(0, 50)}...`);
    
    const prompt = `Generate a thoughtful, helpful response to this comment: "${originalComment}"
    
Post context: ${postContext}

Requirements:
- Be helpful and engaging
- Ask follow-up questions when appropriate
- Keep it conversational
- 50-150 characters
- Don't be overly promotional
- Show genuine interest`;

    // Simulate OpenAI call
    await simulateOpenAICall(prompt, 'comment', 100);
    
    // For now, use pre-written responses with some personalization
    let response = MOCK_COMMENT_RESPONSES[Math.floor(Math.random() * MOCK_COMMENT_RESPONSES.length)];
    
    // Add some contextual elements
    if (originalComment.includes('?')) {
      response += " That's a great question!";
    }
    
    if (originalComment.includes('interesting') || originalComment.includes('fascinating')) {
      response = "I'm glad you find it interesting! " + response;
    }
    
    return {
      content: response,
      metadata: {
        id: uuidv4(),
        generation_prompt: prompt,
        model_used: 'gpt-3.5-turbo',
        response_type: 'supportive',
        quality_score: Math.random() * 0.2 + 0.8, // 0.8-1.0
        created_at: new Date().toISOString()
      }
    };
    
  } catch (error) {
    console.error('Error generating comment response:', error);
    throw new Error(`Failed to generate response: ${error.message}`);
  }
};

/**
 * Generate multiple post variations for A/B testing
 */
export const generatePostVariations = async (trendData, count = 3) => {
  try {
    console.log(`ðŸŽ­ Generating ${count} post variations for: ${trendData.topic}`);
    
    const variations = [];
    const usedTemplates = new Set();
    
    for (let i = 0; i < count; i++) {
      // Ensure we use different templates
      let template;
      do {
        template = MOCK_POST_TEMPLATES[Math.floor(Math.random() * MOCK_POST_TEMPLATES.length)];
      } while (usedTemplates.has(template.tone) && usedTemplates.size < MOCK_POST_TEMPLATES.length);
      
      usedTemplates.add(template.tone);
      
      const variation = await generateTrendPost({
        ...trendData,
        _templateOverride: template
      });
      
      variations.push({
        ...variation,
        variation_id: i + 1,
        tone: template.tone
      });
      
      // Small delay between generations
      await new Promise(resolve => setTimeout(resolve, 500));
    }
    
    console.log(`âœ… Generated ${variations.length} post variations`);
    return variations;
    
  } catch (error) {
    console.error('Error generating post variations:', error);
    throw new Error(`Failed to generate variations: ${error.message}`);
  }
};

/**
 * Enhance existing post with AI suggestions
 */
export const enhancePost = async (originalPost) => {
  try {
    console.log(`âœ¨ Enhancing post: ${originalPost.substring(0, 50)}...`);
    
    const prompt = `Improve this social media post to make it more engaging: "${originalPost}"
    
Requirements:
- Keep the core message
- Add relevant emojis
- Improve readability
- Add engaging hooks
- Include call-to-action
- Stay under 280 characters`;

    // Simulate OpenAI call
    await simulateOpenAICall(prompt, 'enhancement');
    
    // Simple enhancement logic
    let enhanced = originalPost;
    
    // Add emojis if missing
    if (!enhanced.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]/u)) {
      enhanced = `ðŸ’¡ ${enhanced}`;
    }
    
    // Add call-to-action if missing
    if (!enhanced.includes('?') && !enhanced.includes('What') && !enhanced.includes('Share')) {
      enhanced += ' What do you think?';
    }
    
    return {
      original: originalPost,
      enhanced: enhanced,
      improvements: ['Added engaging emoji', 'Added call-to-action', 'Improved readability'],
      metadata: {
        enhancement_score: Math.random() * 0.3 + 0.7,
        created_at: new Date().toISOString()
      }
    };
    
  } catch (error) {
    console.error('Error enhancing post:', error);
    throw new Error(`Failed to enhance post: ${error.message}`);
  }
};

/**
 * Generate content summary for analytics
 */
export const generateContentSummary = (content, type = 'post') => {
  const wordCount = content.split(' ').length;
  const characterCount = content.length;
  const hashtagCount = (content.match(/#\w+/g) || []).length;
  const emojiCount = (content.match(/[\u{1F600}-\u{1F64F}]|[\u{1F300}-\u{1F5FF}]|[\u{1F680}-\u{1F6FF}]|[\u{1F1E0}-\u{1F1FF}]/gu) || []).length;
  const questionCount = (content.match(/\?/g) || []).length;
  
  // Simple engagement prediction
  let engagementScore = 50;
  if (questionCount > 0) engagementScore += 20;
  if (hashtagCount > 0) engagementScore += 10;
  if (emojiCount > 0) engagementScore += 10;
  if (wordCount >= 15 && wordCount <= 30) engagementScore += 10;
  
  return {
    type,
    wordCount,
    characterCount,
    hashtagCount,
    emojiCount,
    questionCount,
    predictedEngagement: Math.min(100, engagementScore),
    readabilityScore: Math.random() * 20 + 80, // 80-100
    sentimentScore: Math.random() * 0.4 + 0.6 // 0.6-1.0 (positive)
  };
};

/**
 * Check content quality and provide recommendations
 */
export const analyzeContentQuality = (content) => {
  const analysis = generateContentSummary(content);
  const recommendations = [];
  
  if (analysis.characterCount > 280) {
    recommendations.push('Consider shortening the post for better readability');
  }
  
  if (analysis.hashtagCount === 0) {
    recommendations.push('Add relevant hashtags to increase discoverability');
  }
  
  if (analysis.questionCount === 0) {
    recommendations.push('Add a question to encourage engagement');
  }
  
  if (analysis.emojiCount === 0) {
    recommendations.push('Consider adding emojis to make the post more visually appealing');
  }
  
  if (analysis.wordCount < 10) {
    recommendations.push('Consider adding more context or details');
  }
  
  return {
    ...analysis,
    qualityScore: analysis.predictedEngagement,
    recommendations,
    isOptimal: recommendations.length <= 1
  };
};

export default {
  generateTrendPost,
  generateCommentResponse,
  generatePostVariations,
  enhancePost,
  generateContentSummary,
  analyzeContentQuality
};